# Generated by carnix 0.6.5: /nix/store/jvspcx4ynxfhxng60ajbmv9gzgi7d0m4-rust_carnix-0.6.5/bin/carnix --output Cargo.nix Cargo.lock
{ lib, buildPlatform, buildRustCrate, fetchgit }:
let kernel = buildPlatform.parsed.kernel.name;
    abi = buildPlatform.parsed.abi.name;
    include = includedFiles: src: builtins.filterSource (path: type:
      lib.lists.any (f:
        let p = toString (src + ("/" + f)); in
        (path == p) || (type == "directory" && lib.strings.hasPrefix path p)
      ) includedFiles
    ) src;
    updateFeatures = f: up: functions: builtins.deepSeq f (lib.lists.foldl' (features: fun: fun features) (lib.attrsets.recursiveUpdate f up) functions);
    mapFeatures = features: map (fun: fun { features = features; });
    mkFeatures = feat: lib.lists.foldl (features: featureName:
      if feat.${featureName} or false then
        [ featureName ] ++ features
      else
        features
    ) [] (builtins.attrNames feat);
in
rec {
  channel_proxy = f: channel_proxy_0_1_0 { features = channel_proxy_0_1_0_features { channel_proxy_0_1_0 = f; }; };
  autocfg_0_1_6_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "autocfg";
    version = "0.1.6";
    authors = [ "Josh Stone <cuviper@gmail.com>" ];
    sha256 = "1yzawpsmrcy3x60i59hfwwg7mfdwc74199m2lgkc4vam5ijy8mz7";
    inherit dependencies buildDependencies features;
  };
  base64_0_9_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "base64";
    version = "0.9.3";
    authors = [ "Alice Maz <alice@alicemaz.com>" "Marshall Pierce <marshall@mpierce.org>" ];
    sha256 = "11hhz8ln4zbpn2h2gm9fbbb9j254wrd4fpmddlyah2rrnqsmmqkd";
    inherit dependencies buildDependencies features;
  };
  bitflags_1_2_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "bitflags";
    version = "1.2.1";
    authors = [ "The Rust Project Developers" ];
    sha256 = "0b77awhpn7yaqjjibm69ginfn996azx5vkzfjj39g3wbsqs7mkxg";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  byteorder_1_3_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "byteorder";
    version = "1.3.2";
    authors = [ "Andrew Gallant <jamslam@gmail.com>" ];
    sha256 = "099fxwc79ncpcl8dgg9hql8gznz11a3sjs7pai0mg6w8r05khvdx";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  c2_chacha_0_2_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "c2-chacha";
    version = "0.2.2";
    authors = [ "The CryptoCorrosion Contributors" ];
    sha256 = "1lcfazshbiw8kdpcgphlmls0mz5j4wnvsq1diaz4b2bcvgm3r2cn";
    inherit dependencies buildDependencies features;
  };
  cfg_if_0_1_10_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "cfg-if";
    version = "0.1.10";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "0x52qzpbyl2f2jqs7kkqzgfki2cpq99gpfjjigdp8pwwfqk01007";
    inherit dependencies buildDependencies features;
  };
  channel_proxy_0_1_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "channel-proxy";
    version = "0.1.0";
    authors = [ "Kier Davis <kierdavis@gmail.com>" ];
    src = ./.;
    inherit dependencies buildDependencies features;
  };
  cloudabi_0_0_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "cloudabi";
    version = "0.0.3";
    authors = [ "Nuxi (https://nuxi.nl/) and contributors" ];
    sha256 = "1z9lby5sr6vslfd14d6igk03s7awf91mxpsfmsp3prxbxlk0x7h5";
    libPath = "cloudabi.rs";
    inherit dependencies buildDependencies features;
  };
  either_1_5_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "either";
    version = "1.5.3";
    authors = [ "bluss" ];
    sha256 = "040fgh0jahqra9ascwb986zgll1ss88ky9bfvn0zfay42zsyz83n";
    inherit dependencies buildDependencies features;
  };
  fs_extra_1_1_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "fs_extra";
    version = "1.1.0";
    authors = [ "Denis Kurilenko <webdesus@gmail.com>" ];
    sha256 = "0zp4q7k4s8kwwkylj13ccpdh7mc64wcc092nia6ilpyk9ppgl3d9";
    inherit dependencies buildDependencies features;
  };
  fuchsia_cprng_0_1_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "fuchsia-cprng";
    version = "0.1.1";
    authors = [ "Erick Tryzelaar <etryzelaar@google.com>" ];
    sha256 = "07apwv9dj716yjlcj29p94vkqn5zmfh7hlrqvrjx3wzshphc95h9";
    inherit dependencies buildDependencies features;
  };
  getrandom_0_1_12_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "getrandom";
    version = "0.1.12";
    authors = [ "The Rand Project Developers" ];
    sha256 = "0n3cyf8vm82hbbj6xzgaszjn852i0jl9qxibl7im7mvn7s9yrvb6";
    inherit dependencies buildDependencies features;
  };
  httparse_1_3_4_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "httparse";
    version = "1.3.4";
    authors = [ "Sean McArthur <sean@seanmonstar.com>" ];
    sha256 = "0dggj4s0cq69bn63q9nqzzay5acmwl33nrbhjjsh5xys8sk2x4jw";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  hyper_0_10_16_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "hyper";
    version = "0.10.16";
    authors = [ "Sean McArthur <sean.monstar@gmail.com>" "Jonathan Reem <jonathan.reem@gmail.com>" ];
    sha256 = "078jqmrjk7gdrfqjnydhyh8vb93vr4zymid84l7x67abary947x5";
    inherit dependencies buildDependencies features;
  };
  idna_0_1_5_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "idna";
    version = "0.1.5";
    authors = [ "The rust-url developers" ];
    sha256 = "1gwgl19rz5vzi67rrhamczhxy050f5ynx4ybabfapyalv7z1qmjy";
    inherit dependencies buildDependencies features;
  };
  iron_0_6_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "iron";
    version = "0.6.1";
    authors = [ "Jonathan Reem <jonathan.reem@gmail.com>" "Zach Pomerantz <zmp@umich.edu>" "Michael Sproul <micsproul@gmail.com>" "Patrick Tran <patrick.tran06@gmail.com>" ];
    sha256 = "032vhdfx3mvkqydr0k7n9rdzziybqp37qmkmn8657d06k81aq2k2";
    libPath = "src/lib.rs";
    inherit dependencies buildDependencies features;
  };
  itertools_0_8_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "itertools";
    version = "0.8.0";
    authors = [ "bluss" ];
    sha256 = "0xpz59yf03vyj540i7sqypn2aqfid08c4vzyg0l6rqm08da77n7n";
    inherit dependencies buildDependencies features;
  };
  language_tags_0_2_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "language-tags";
    version = "0.2.2";
    authors = [ "Pyfisch <pyfisch@gmail.com>" ];
    sha256 = "1zkrdzsqzzc7509kd7nngdwrp461glm2g09kqpzaqksp82frjdvy";
    inherit dependencies buildDependencies features;
  };
  lazy_static_1_4_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "lazy_static";
    version = "1.4.0";
    authors = [ "Marvin LÃ¶bel <loebel.marvin@gmail.com>" ];
    sha256 = "13h6sdghdcy7vcqsm2gasfw3qg7ssa0fl3sw7lq6pdkbk52wbyfr";
    inherit dependencies buildDependencies features;
  };
  libc_0_2_64_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "libc";
    version = "0.2.64";
    authors = [ "The Rust Project Developers" ];
    sha256 = "05nrj06bgfnh65g2rm7m83wn34k4vlwmz6fvhg5k7qh07yxxddfc";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  log_0_3_9_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "log";
    version = "0.3.9";
    authors = [ "The Rust Project Developers" ];
    sha256 = "19i9pwp7lhaqgzangcpw00kc3zsgcqcx84crv07xgz3v7d3kvfa2";
    inherit dependencies buildDependencies features;
  };
  log_0_4_8_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "log";
    version = "0.4.8";
    authors = [ "The Rust Project Developers" ];
    sha256 = "0wvzzzcn89dai172rrqcyz06pzldyyy0lf0w71csmn206rdpnb15";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  matches_0_1_8_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "matches";
    version = "0.1.8";
    authors = [ "Simon Sapin <simon.sapin@exyr.org>" ];
    sha256 = "03hl636fg6xggy0a26200xs74amk3k9n0908rga2szn68agyz3cv";
    libPath = "lib.rs";
    inherit dependencies buildDependencies features;
  };
  mime_0_2_6_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "mime";
    version = "0.2.6";
    authors = [ "Sean McArthur <sean.monstar@gmail.com>" ];
    sha256 = "1skwwa0j3kqd8rm9387zgabjhp07zj99q71nzlhba4lrz9r911b3";
    inherit dependencies buildDependencies features;
  };
  mime_guess_1_8_7_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "mime_guess";
    version = "1.8.7";
    authors = [ "Austin Bonander <austin.bonander@gmail.com>" ];
    sha256 = "0l0l3iz8y536m6v3gvbs24sk0ij2ma4ngrvlc0kqpgr3yly1h82r";
    inherit dependencies buildDependencies features;
  };
  modifier_0_1_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "modifier";
    version = "0.1.0";
    authors = [ "Jonathan Reem <jonathan.reem@gmail.com>" ];
    sha256 = "1zicszfn54wir5nf40jmpq55in2s7xcdqn496wpgj7ckxyh82gfd";
    inherit dependencies buildDependencies features;
  };
  num_cpus_1_10_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "num_cpus";
    version = "1.10.1";
    authors = [ "Sean McArthur <sean@seanmonstar.com>" ];
    sha256 = "1zi5s2cbnqqb0k0kdd6gqn2x97f9bssv44430h6w28awwzppyh8i";
    inherit dependencies buildDependencies features;
  };
  percent_encoding_1_0_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "percent-encoding";
    version = "1.0.1";
    authors = [ "The rust-url developers" ];
    sha256 = "04ahrp7aw4ip7fmadb0bknybmkfav0kk0gw4ps3ydq5w6hr0ib5i";
    libPath = "lib.rs";
    inherit dependencies buildDependencies features;
  };
  phf_0_7_24_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "phf";
    version = "0.7.24";
    authors = [ "Steven Fackler <sfackler@gmail.com>" ];
    sha256 = "19mmhmafd1dhywc7pzkmd1nq0kjfvg57viny20jqa91hhprf2dv5";
    libPath = "src/lib.rs";
    inherit dependencies buildDependencies features;
  };
  phf_codegen_0_7_24_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "phf_codegen";
    version = "0.7.24";
    authors = [ "Steven Fackler <sfackler@gmail.com>" ];
    sha256 = "0avkx97r4ph8rv70wwgniarlcfiq27yd74gmnxfdv3rx840cyf8g";
    inherit dependencies buildDependencies features;
  };
  phf_generator_0_7_24_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "phf_generator";
    version = "0.7.24";
    authors = [ "Steven Fackler <sfackler@gmail.com>" ];
    sha256 = "1frn2jfydinifxb1fki0xnnsxf0f1ciaa79jz415r5qhw1ash72j";
    inherit dependencies buildDependencies features;
  };
  phf_shared_0_7_24_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "phf_shared";
    version = "0.7.24";
    authors = [ "Steven Fackler <sfackler@gmail.com>" ];
    sha256 = "1hndqn461jvm2r269ym4qh7fnjc6n8yy53avc2pb43p70vxhm9rl";
    libPath = "src/lib.rs";
    inherit dependencies buildDependencies features;
  };
  plugin_0_2_6_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "plugin";
    version = "0.2.6";
    authors = [ "Jonathan Reem <jonathan.reem@gmail.com>" ];
    sha256 = "13byr5ilqcs83zlj3sm9chs70jim6n6dwgdrzmzjdk6jz35d376a";
    inherit dependencies buildDependencies features;
  };
  ppv_lite86_0_2_5_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "ppv-lite86";
    version = "0.2.5";
    authors = [ "The CryptoCorrosion Contributors" ];
    sha256 = "1r3bhih75vhl8v7q0flmywl7hmfg902yf3jjzracsh0jlkldij6r";
    inherit dependencies buildDependencies features;
  };
  rand_0_6_5_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "rand";
    version = "0.6.5";
    authors = [ "The Rand Project Developers" "The Rust Project Developers" ];
    sha256 = "0zbck48159aj8zrwzf80sd9xxh96w4f4968nshwjpysjvflimvgb";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  rand_0_7_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "rand";
    version = "0.7.2";
    authors = [ "The Rand Project Developers" "The Rust Project Developers" ];
    sha256 = "1f53047g63b9kyyx1k8wgwzspk4n96w2n2h1a9848ggl9y9h0ik6";
    inherit dependencies buildDependencies features;
  };
  rand_chacha_0_1_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "rand_chacha";
    version = "0.1.1";
    authors = [ "The Rand Project Developers" "The Rust Project Developers" ];
    sha256 = "0xnxm4mjd7wjnh18zxc1yickw58axbycp35ciraplqdfwn1gffwi";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  rand_chacha_0_2_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "rand_chacha";
    version = "0.2.1";
    authors = [ "The Rand Project Developers" "The Rust Project Developers" "The CryptoCorrosion Contributors" ];
    sha256 = "0zpp3wmxhhmripb6bywhzhx5rfwl4dfbny85hpalwdj0sncv0p0k";
    inherit dependencies buildDependencies features;
  };
  rand_core_0_3_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "rand_core";
    version = "0.3.1";
    authors = [ "The Rand Project Developers" "The Rust Project Developers" ];
    sha256 = "0q0ssgpj9x5a6fda83nhmfydy7a6c0wvxm0jhncsmjx8qp8gw91m";
    inherit dependencies buildDependencies features;
  };
  rand_core_0_4_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "rand_core";
    version = "0.4.2";
    authors = [ "The Rand Project Developers" "The Rust Project Developers" ];
    sha256 = "18zpzwn4bl7lp9f36iacy8mvdnfrhfmzsl35gmln98dcindff2ly";
    inherit dependencies buildDependencies features;
  };
  rand_core_0_5_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "rand_core";
    version = "0.5.1";
    authors = [ "The Rand Project Developers" "The Rust Project Developers" ];
    sha256 = "19qfnh77bzz0x2gfsk91h0gygy0z1s5l3yyc2j91gmprq60d6s3r";
    inherit dependencies buildDependencies features;
  };
  rand_hc_0_1_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "rand_hc";
    version = "0.1.0";
    authors = [ "The Rand Project Developers" ];
    sha256 = "05agb75j87yp7y1zk8yf7bpm66hc0673r3dlypn0kazynr6fdgkz";
    inherit dependencies buildDependencies features;
  };
  rand_hc_0_2_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "rand_hc";
    version = "0.2.0";
    authors = [ "The Rand Project Developers" ];
    sha256 = "0592q9kqcna9aiyzy6vp3fadxkkbpfkmi2cnkv48zhybr0v2yf01";
    inherit dependencies buildDependencies features;
  };
  rand_isaac_0_1_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "rand_isaac";
    version = "0.1.1";
    authors = [ "The Rand Project Developers" "The Rust Project Developers" ];
    sha256 = "10hhdh5b5sa03s6b63y9bafm956jwilx41s71jbrzl63ccx8lxdq";
    inherit dependencies buildDependencies features;
  };
  rand_jitter_0_1_4_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "rand_jitter";
    version = "0.1.4";
    authors = [ "The Rand Project Developers" ];
    sha256 = "13nr4h042ab9l7qcv47bxrxw3gkf2pc3cni6c9pyi4nxla0mm7b6";
    inherit dependencies buildDependencies features;
  };
  rand_os_0_1_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "rand_os";
    version = "0.1.3";
    authors = [ "The Rand Project Developers" ];
    sha256 = "0ywwspizgs9g8vzn6m5ix9yg36n15119d6n792h7mk4r5vs0ww4j";
    inherit dependencies buildDependencies features;
  };
  rand_pcg_0_1_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "rand_pcg";
    version = "0.1.2";
    authors = [ "The Rand Project Developers" ];
    sha256 = "04qgi2ai2z42li5h4aawvxbpnlqyjfnipz9d6k73mdnl6p1xq938";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  rand_xorshift_0_1_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "rand_xorshift";
    version = "0.1.1";
    authors = [ "The Rand Project Developers" "The Rust Project Developers" ];
    sha256 = "0v365c4h4lzxwz5k5kp9m0661s0sss7ylv74if0xb4svis9sswnn";
    inherit dependencies buildDependencies features;
  };
  rdrand_0_4_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "rdrand";
    version = "0.4.0";
    authors = [ "Simonas Kazlauskas <rdrand@kazlauskas.me>" ];
    sha256 = "15hrcasn0v876wpkwab1dwbk9kvqwrb3iv4y4dibb6yxnfvzwajk";
    inherit dependencies buildDependencies features;
  };
  redox_syscall_0_1_56_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "redox_syscall";
    version = "0.1.56";
    authors = [ "Jeremy Soller <jackpot51@gmail.com>" ];
    sha256 = "0jcp8nd947zcy938bz09pzlmi3vyxfdzg92pjxdvvk0699vwcc26";
    libName = "syscall";
    inherit dependencies buildDependencies features;
  };
  remove_dir_all_0_5_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "remove_dir_all";
    version = "0.5.2";
    authors = [ "Aaronepower <theaaronepower@gmail.com>" ];
    sha256 = "04sxg2ppvxiljc2i13bwvpbi540rf9d2a89cq0wmqf9pjvr3a1wm";
    inherit dependencies buildDependencies features;
  };
  route_recognizer_0_1_13_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "route-recognizer";
    version = "0.1.13";
    authors = [ "wycats" ];
    sha256 = "1dxx291fw0mhbnbqiaaz46a8810mgp5axg5jp596ya64vfrka7qv";
    inherit dependencies buildDependencies features;
  };
  router_0_6_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "router";
    version = "0.6.0";
    authors = [ "Jonathan Reem <jonathan.reem@gmail.com>" ];
    sha256 = "1nhw5gdslj02ww33czcbvpjlkjsq22bwzzylhbi2781cz0qp9s4w";
    inherit dependencies buildDependencies features;
  };
  safemem_0_3_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "safemem";
    version = "0.3.2";
    authors = [ "Austin Bonander <austin.bonander@gmail.com>" ];
    sha256 = "1h0n07sy386gz0jb6nz170m66jkbnwyky8y11v551dxydz77a0jc";
    inherit dependencies buildDependencies features;
  };
  siphasher_0_2_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "siphasher";
    version = "0.2.3";
    authors = [ "Frank Denis <github@pureftpd.org>" ];
    sha256 = "1ganj1grxqnkvv4ds3vby039bm999jrr58nfq2x3kjhzkw2bnqkw";
    inherit dependencies buildDependencies features;
  };
  smallvec_0_6_10_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "smallvec";
    version = "0.6.10";
    authors = [ "Simon Sapin <simon.sapin@exyr.org>" ];
    sha256 = "01w7xd79q0bwn683gk4ryw50ad1zzxkny10f7gkbaaj1ax6f4q4h";
    libPath = "lib.rs";
    inherit dependencies buildDependencies features;
  };
  tempfile_3_1_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "tempfile";
    version = "3.1.0";
    authors = [ "Steven Allen <steven@stebalien.com>" "The Rust Project Developers" "Ashley Mannix <ashleymannix@live.com.au>" "Jason White <jasonaw0@gmail.com>" ];
    sha256 = "1r7ykxw90p5hm1g46i8ia33j5iwl3q252kbb6b074qhdav3sqndk";
    inherit dependencies buildDependencies features;
  };
  time_0_1_42_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "time";
    version = "0.1.42";
    authors = [ "The Rust Project Developers" ];
    sha256 = "1ny809kmdjwd4b478ipc33dz7q6nq7rxk766x8cnrg6zygcksmmx";
    inherit dependencies buildDependencies features;
  };
  traitobject_0_1_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "traitobject";
    version = "0.1.0";
    authors = [ "Jonathan Reem <jonathan.reem@gmail.com>" ];
    sha256 = "10hi8pl361l539g4kg74mcrhn7grmwlar4jl528ddn2z2jvb7lw3";
    inherit dependencies buildDependencies features;
  };
  typeable_0_1_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "typeable";
    version = "0.1.2";
    authors = [ "Jonathan Reem <jonathan.reem@gmail.com>" ];
    sha256 = "0lvff10hwyy852m6r11msyv1rpgpnapn284i8dk0p0q5saqvbvnx";
    inherit dependencies buildDependencies features;
  };
  typemap_0_3_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "typemap";
    version = "0.3.3";
    authors = [ "Jonathan Reem <jonathan.reem@gmail.com>" ];
    sha256 = "1whvpcq2slamy310z5hd3hl214v91sdxmd9avlqa1bn3l258svkx";
    inherit dependencies buildDependencies features;
  };
  unicase_1_4_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "unicase";
    version = "1.4.2";
    authors = [ "Sean McArthur <sean.monstar@gmail.com>" ];
    sha256 = "0rbnhw2mnhcwrij3vczp0sl8zdfmvf2dlh8hly81kj7132kfj0mf";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  unicode_bidi_0_3_4_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "unicode-bidi";
    version = "0.3.4";
    authors = [ "The Servo Project Developers" ];
    sha256 = "0lcd6jasrf8p9p0q20qyf10c6xhvw40m2c4rr105hbk6zy26nj1q";
    libName = "unicode_bidi";
    inherit dependencies buildDependencies features;
  };
  unicode_normalization_0_1_8_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "unicode-normalization";
    version = "0.1.8";
    authors = [ "kwantam <kwantam@gmail.com>" ];
    sha256 = "1pb26i2xd5zz0icabyqahikpca0iwj2jd4145pczc4bb7p641dsz";
    inherit dependencies buildDependencies features;
  };
  unsafe_any_0_4_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "unsafe-any";
    version = "0.4.2";
    authors = [ "Jonathan Reem <jonathan.reem@gmail.com>" ];
    sha256 = "1zcvx5s71fbx4l691bg770g9yx947b8mmp4yf0mczcric07sh44s";
    inherit dependencies buildDependencies features;
  };
  url_1_7_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "url";
    version = "1.7.2";
    authors = [ "The rust-url developers" ];
    sha256 = "0qzrjzd9r1niv7037x4cgnv98fs1vj0k18lpxx890ipc47x5gc09";
    inherit dependencies buildDependencies features;
  };
  version_check_0_1_5_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "version_check";
    version = "0.1.5";
    authors = [ "Sergio Benitez <sb@sergio.bz>" ];
    sha256 = "1yrx9xblmwbafw2firxyqbj8f771kkzfd24n3q7xgwiqyhi0y8qd";
    inherit dependencies buildDependencies features;
  };
  wasi_0_7_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "wasi";
    version = "0.7.0";
    authors = [ "The Cranelift Project Developers" ];
    sha256 = "1lqknxy8x9mrsy0pna6xlwzypbhli73nbai9gmin5f4z1ghlng25";
    inherit dependencies buildDependencies features;
  };
  winapi_0_3_8_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "winapi";
    version = "0.3.8";
    authors = [ "Peter Atashian <retep998@gmail.com>" ];
    sha256 = "084ialbgww1vxry341fmkg5crgpvab3w52ahx1wa54yqjgym0vxs";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  winapi_i686_pc_windows_gnu_0_4_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "winapi-i686-pc-windows-gnu";
    version = "0.4.0";
    authors = [ "Peter Atashian <retep998@gmail.com>" ];
    sha256 = "05ihkij18r4gamjpxj4gra24514can762imjzlmak5wlzidplzrp";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  winapi_x86_64_pc_windows_gnu_0_4_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "winapi-x86_64-pc-windows-gnu";
    version = "0.4.0";
    authors = [ "Peter Atashian <retep998@gmail.com>" ];
    sha256 = "0n1ylmlsb8yg1v583i4xy0qmqg42275flvbc51hdqjjfjcl9vlbj";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  autocfg_0_1_6 = { features?(autocfg_0_1_6_features {}) }: autocfg_0_1_6_ {};
  autocfg_0_1_6_features = f: updateFeatures f (rec {
    autocfg_0_1_6.default = (f.autocfg_0_1_6.default or true);
  }) [];
  base64_0_9_3 = { features?(base64_0_9_3_features {}) }: base64_0_9_3_ {
    dependencies = mapFeatures features ([ byteorder_1_3_2 safemem_0_3_2 ]);
  };
  base64_0_9_3_features = f: updateFeatures f (rec {
    base64_0_9_3.default = (f.base64_0_9_3.default or true);
    byteorder_1_3_2.default = true;
    safemem_0_3_2.default = true;
  }) [ byteorder_1_3_2_features safemem_0_3_2_features ];
  bitflags_1_2_1 = { features?(bitflags_1_2_1_features {}) }: bitflags_1_2_1_ {
    features = mkFeatures (features.bitflags_1_2_1 or {});
  };
  bitflags_1_2_1_features = f: updateFeatures f (rec {
    bitflags_1_2_1.default = (f.bitflags_1_2_1.default or true);
  }) [];
  byteorder_1_3_2 = { features?(byteorder_1_3_2_features {}) }: byteorder_1_3_2_ {
    features = mkFeatures (features.byteorder_1_3_2 or {});
  };
  byteorder_1_3_2_features = f: updateFeatures f (rec {
    byteorder_1_3_2.default = (f.byteorder_1_3_2.default or true);
    byteorder_1_3_2.std =
      (f.byteorder_1_3_2.std or false) ||
      (f.byteorder_1_3_2.default or false) ||
      (byteorder_1_3_2.default or false);
  }) [];
  c2_chacha_0_2_2 = { features?(c2_chacha_0_2_2_features {}) }: c2_chacha_0_2_2_ {
    dependencies = mapFeatures features ([ ppv_lite86_0_2_5 ]
      ++ (if features.c2_chacha_0_2_2.lazy_static or false then [ lazy_static_1_4_0 ] else []));
    features = mkFeatures (features.c2_chacha_0_2_2 or {});
  };
  c2_chacha_0_2_2_features = f: updateFeatures f (rec {
    c2_chacha_0_2_2.byteorder =
      (f.c2_chacha_0_2_2.byteorder or false) ||
      (f.c2_chacha_0_2_2.rustcrypto_api or false) ||
      (c2_chacha_0_2_2.rustcrypto_api or false);
    c2_chacha_0_2_2.default = (f.c2_chacha_0_2_2.default or true);
    c2_chacha_0_2_2.lazy_static =
      (f.c2_chacha_0_2_2.lazy_static or false) ||
      (f.c2_chacha_0_2_2.std or false) ||
      (c2_chacha_0_2_2.std or false);
    c2_chacha_0_2_2.rustcrypto_api =
      (f.c2_chacha_0_2_2.rustcrypto_api or false) ||
      (f.c2_chacha_0_2_2.default or false) ||
      (c2_chacha_0_2_2.default or false);
    c2_chacha_0_2_2.simd =
      (f.c2_chacha_0_2_2.simd or false) ||
      (f.c2_chacha_0_2_2.default or false) ||
      (c2_chacha_0_2_2.default or false);
    c2_chacha_0_2_2.std =
      (f.c2_chacha_0_2_2.std or false) ||
      (f.c2_chacha_0_2_2.default or false) ||
      (c2_chacha_0_2_2.default or false);
    c2_chacha_0_2_2.stream-cipher =
      (f.c2_chacha_0_2_2.stream-cipher or false) ||
      (f.c2_chacha_0_2_2.rustcrypto_api or false) ||
      (c2_chacha_0_2_2.rustcrypto_api or false);
    lazy_static_1_4_0.default = true;
    ppv_lite86_0_2_5.default = true;
    ppv_lite86_0_2_5.simd =
      (f.ppv_lite86_0_2_5.simd or false) ||
      (c2_chacha_0_2_2.simd or false) ||
      (f.c2_chacha_0_2_2.simd or false);
  }) [ lazy_static_1_4_0_features ppv_lite86_0_2_5_features ];
  cfg_if_0_1_10 = { features?(cfg_if_0_1_10_features {}) }: cfg_if_0_1_10_ {
    dependencies = mapFeatures features ([]);
    features = mkFeatures (features.cfg_if_0_1_10 or {});
  };
  cfg_if_0_1_10_features = f: updateFeatures f (rec {
    cfg_if_0_1_10.compiler_builtins =
      (f.cfg_if_0_1_10.compiler_builtins or false) ||
      (f.cfg_if_0_1_10.rustc-dep-of-std or false) ||
      (cfg_if_0_1_10.rustc-dep-of-std or false);
    cfg_if_0_1_10.core =
      (f.cfg_if_0_1_10.core or false) ||
      (f.cfg_if_0_1_10.rustc-dep-of-std or false) ||
      (cfg_if_0_1_10.rustc-dep-of-std or false);
    cfg_if_0_1_10.default = (f.cfg_if_0_1_10.default or true);
  }) [];
  channel_proxy_0_1_0 = { features?(channel_proxy_0_1_0_features {}) }: channel_proxy_0_1_0_ {
    dependencies = mapFeatures features ([ fs_extra_1_1_0 iron_0_6_1 itertools_0_8_0 router_0_6_0 tempfile_3_1_0 ]);
  };
  channel_proxy_0_1_0_features = f: updateFeatures f (rec {
    channel_proxy_0_1_0.default = (f.channel_proxy_0_1_0.default or true);
    fs_extra_1_1_0.default = true;
    iron_0_6_1.default = true;
    itertools_0_8_0.default = true;
    router_0_6_0.default = true;
    tempfile_3_1_0.default = true;
  }) [ fs_extra_1_1_0_features iron_0_6_1_features itertools_0_8_0_features router_0_6_0_features tempfile_3_1_0_features ];
  cloudabi_0_0_3 = { features?(cloudabi_0_0_3_features {}) }: cloudabi_0_0_3_ {
    dependencies = mapFeatures features ([ ]
      ++ (if features.cloudabi_0_0_3.bitflags or false then [ bitflags_1_2_1 ] else []));
    features = mkFeatures (features.cloudabi_0_0_3 or {});
  };
  cloudabi_0_0_3_features = f: updateFeatures f (rec {
    bitflags_1_2_1.default = true;
    cloudabi_0_0_3.bitflags =
      (f.cloudabi_0_0_3.bitflags or false) ||
      (f.cloudabi_0_0_3.default or false) ||
      (cloudabi_0_0_3.default or false);
    cloudabi_0_0_3.default = (f.cloudabi_0_0_3.default or true);
  }) [ bitflags_1_2_1_features ];
  either_1_5_3 = { features?(either_1_5_3_features {}) }: either_1_5_3_ {
    dependencies = mapFeatures features ([]);
    features = mkFeatures (features.either_1_5_3 or {});
  };
  either_1_5_3_features = f: updateFeatures f (rec {
    either_1_5_3.default = (f.either_1_5_3.default or true);
    either_1_5_3.use_std =
      (f.either_1_5_3.use_std or false) ||
      (f.either_1_5_3.default or false) ||
      (either_1_5_3.default or false);
  }) [];
  fs_extra_1_1_0 = { features?(fs_extra_1_1_0_features {}) }: fs_extra_1_1_0_ {};
  fs_extra_1_1_0_features = f: updateFeatures f (rec {
    fs_extra_1_1_0.default = (f.fs_extra_1_1_0.default or true);
  }) [];
  fuchsia_cprng_0_1_1 = { features?(fuchsia_cprng_0_1_1_features {}) }: fuchsia_cprng_0_1_1_ {};
  fuchsia_cprng_0_1_1_features = f: updateFeatures f (rec {
    fuchsia_cprng_0_1_1.default = (f.fuchsia_cprng_0_1_1.default or true);
  }) [];
  getrandom_0_1_12 = { features?(getrandom_0_1_12_features {}) }: getrandom_0_1_12_ {
    dependencies = mapFeatures features ([ cfg_if_0_1_10 ])
      ++ (if (kernel == "linux" || kernel == "darwin") || kernel == "redox" then mapFeatures features ([ libc_0_2_64 ]) else [])
      ++ (if kernel == "wasi" then mapFeatures features ([ wasi_0_7_0 ]) else [])
      ++ (if kernel == "wasm32-unknown-unknown" then mapFeatures features ([]) else []);
    features = mkFeatures (features.getrandom_0_1_12 or {});
  };
  getrandom_0_1_12_features = f: updateFeatures f (rec {
    cfg_if_0_1_10.default = true;
    getrandom_0_1_12.compiler_builtins =
      (f.getrandom_0_1_12.compiler_builtins or false) ||
      (f.getrandom_0_1_12.rustc-dep-of-std or false) ||
      (getrandom_0_1_12.rustc-dep-of-std or false);
    getrandom_0_1_12.core =
      (f.getrandom_0_1_12.core or false) ||
      (f.getrandom_0_1_12.rustc-dep-of-std or false) ||
      (getrandom_0_1_12.rustc-dep-of-std or false);
    getrandom_0_1_12.default = (f.getrandom_0_1_12.default or true);
    libc_0_2_64.default = (f.libc_0_2_64.default or false);
    wasi_0_7_0.default = true;
  }) [ cfg_if_0_1_10_features libc_0_2_64_features wasi_0_7_0_features ];
  httparse_1_3_4 = { features?(httparse_1_3_4_features {}) }: httparse_1_3_4_ {
    features = mkFeatures (features.httparse_1_3_4 or {});
  };
  httparse_1_3_4_features = f: updateFeatures f (rec {
    httparse_1_3_4.default = (f.httparse_1_3_4.default or true);
    httparse_1_3_4.std =
      (f.httparse_1_3_4.std or false) ||
      (f.httparse_1_3_4.default or false) ||
      (httparse_1_3_4.default or false);
  }) [];
  hyper_0_10_16 = { features?(hyper_0_10_16_features {}) }: hyper_0_10_16_ {
    dependencies = mapFeatures features ([ base64_0_9_3 httparse_1_3_4 language_tags_0_2_2 log_0_3_9 mime_0_2_6 num_cpus_1_10_1 time_0_1_42 traitobject_0_1_0 typeable_0_1_2 unicase_1_4_2 url_1_7_2 ]);
    features = mkFeatures (features.hyper_0_10_16 or {});
  };
  hyper_0_10_16_features = f: updateFeatures f (rec {
    base64_0_9_3.default = true;
    httparse_1_3_4.default = true;
    hyper_0_10_16.default = (f.hyper_0_10_16.default or true);
    language_tags_0_2_2.default = true;
    log_0_3_9.default = true;
    mime_0_2_6.default = true;
    num_cpus_1_10_1.default = true;
    time_0_1_42.default = true;
    traitobject_0_1_0.default = true;
    typeable_0_1_2.default = true;
    unicase_1_4_2.default = true;
    url_1_7_2.default = true;
  }) [ base64_0_9_3_features httparse_1_3_4_features language_tags_0_2_2_features log_0_3_9_features mime_0_2_6_features num_cpus_1_10_1_features time_0_1_42_features traitobject_0_1_0_features typeable_0_1_2_features unicase_1_4_2_features url_1_7_2_features ];
  idna_0_1_5 = { features?(idna_0_1_5_features {}) }: idna_0_1_5_ {
    dependencies = mapFeatures features ([ matches_0_1_8 unicode_bidi_0_3_4 unicode_normalization_0_1_8 ]);
  };
  idna_0_1_5_features = f: updateFeatures f (rec {
    idna_0_1_5.default = (f.idna_0_1_5.default or true);
    matches_0_1_8.default = true;
    unicode_bidi_0_3_4.default = true;
    unicode_normalization_0_1_8.default = true;
  }) [ matches_0_1_8_features unicode_bidi_0_3_4_features unicode_normalization_0_1_8_features ];
  iron_0_6_1 = { features?(iron_0_6_1_features {}) }: iron_0_6_1_ {
    dependencies = mapFeatures features ([ hyper_0_10_16 log_0_3_9 mime_guess_1_8_7 modifier_0_1_0 num_cpus_1_10_1 plugin_0_2_6 typemap_0_3_3 url_1_7_2 ]);
    features = mkFeatures (features.iron_0_6_1 or {});
  };
  iron_0_6_1_features = f: updateFeatures f (rec {
    hyper_0_10_16.default = true;
    iron_0_6_1.default = (f.iron_0_6_1.default or true);
    iron_0_6_1.hyper-native-tls =
      (f.iron_0_6_1.hyper-native-tls or false) ||
      (f.iron_0_6_1.native-tls-example or false) ||
      (iron_0_6_1.native-tls-example or false);
    log_0_3_9.default = true;
    mime_guess_1_8_7.default = true;
    modifier_0_1_0.default = true;
    num_cpus_1_10_1.default = true;
    plugin_0_2_6.default = true;
    typemap_0_3_3.default = true;
    url_1_7_2.default = true;
  }) [ hyper_0_10_16_features log_0_3_9_features mime_guess_1_8_7_features modifier_0_1_0_features num_cpus_1_10_1_features plugin_0_2_6_features typemap_0_3_3_features url_1_7_2_features ];
  itertools_0_8_0 = { features?(itertools_0_8_0_features {}) }: itertools_0_8_0_ {
    dependencies = mapFeatures features ([ either_1_5_3 ]);
    features = mkFeatures (features.itertools_0_8_0 or {});
  };
  itertools_0_8_0_features = f: updateFeatures f (rec {
    either_1_5_3.default = (f.either_1_5_3.default or false);
    itertools_0_8_0.default = (f.itertools_0_8_0.default or true);
    itertools_0_8_0.use_std =
      (f.itertools_0_8_0.use_std or false) ||
      (f.itertools_0_8_0.default or false) ||
      (itertools_0_8_0.default or false);
  }) [ either_1_5_3_features ];
  language_tags_0_2_2 = { features?(language_tags_0_2_2_features {}) }: language_tags_0_2_2_ {
    dependencies = mapFeatures features ([]);
    features = mkFeatures (features.language_tags_0_2_2 or {});
  };
  language_tags_0_2_2_features = f: updateFeatures f (rec {
    language_tags_0_2_2.default = (f.language_tags_0_2_2.default or true);
    language_tags_0_2_2.heapsize =
      (f.language_tags_0_2_2.heapsize or false) ||
      (f.language_tags_0_2_2.heap_size or false) ||
      (language_tags_0_2_2.heap_size or false);
    language_tags_0_2_2.heapsize_plugin =
      (f.language_tags_0_2_2.heapsize_plugin or false) ||
      (f.language_tags_0_2_2.heap_size or false) ||
      (language_tags_0_2_2.heap_size or false);
  }) [];
  lazy_static_1_4_0 = { features?(lazy_static_1_4_0_features {}) }: lazy_static_1_4_0_ {
    dependencies = mapFeatures features ([]);
    features = mkFeatures (features.lazy_static_1_4_0 or {});
  };
  lazy_static_1_4_0_features = f: updateFeatures f (rec {
    lazy_static_1_4_0.default = (f.lazy_static_1_4_0.default or true);
    lazy_static_1_4_0.spin =
      (f.lazy_static_1_4_0.spin or false) ||
      (f.lazy_static_1_4_0.spin_no_std or false) ||
      (lazy_static_1_4_0.spin_no_std or false);
  }) [];
  libc_0_2_64 = { features?(libc_0_2_64_features {}) }: libc_0_2_64_ {
    dependencies = mapFeatures features ([]);
    features = mkFeatures (features.libc_0_2_64 or {});
  };
  libc_0_2_64_features = f: updateFeatures f (rec {
    libc_0_2_64.align =
      (f.libc_0_2_64.align or false) ||
      (f.libc_0_2_64.rustc-dep-of-std or false) ||
      (libc_0_2_64.rustc-dep-of-std or false);
    libc_0_2_64.default = (f.libc_0_2_64.default or true);
    libc_0_2_64.rustc-std-workspace-core =
      (f.libc_0_2_64.rustc-std-workspace-core or false) ||
      (f.libc_0_2_64.rustc-dep-of-std or false) ||
      (libc_0_2_64.rustc-dep-of-std or false);
    libc_0_2_64.std =
      (f.libc_0_2_64.std or false) ||
      (f.libc_0_2_64.default or false) ||
      (libc_0_2_64.default or false) ||
      (f.libc_0_2_64.use_std or false) ||
      (libc_0_2_64.use_std or false);
  }) [];
  log_0_3_9 = { features?(log_0_3_9_features {}) }: log_0_3_9_ {
    dependencies = mapFeatures features ([ log_0_4_8 ]);
    features = mkFeatures (features.log_0_3_9 or {});
  };
  log_0_3_9_features = f: updateFeatures f (rec {
    log_0_3_9.default = (f.log_0_3_9.default or true);
    log_0_3_9.use_std =
      (f.log_0_3_9.use_std or false) ||
      (f.log_0_3_9.default or false) ||
      (log_0_3_9.default or false);
    log_0_4_8.default = true;
    log_0_4_8.max_level_debug =
      (f.log_0_4_8.max_level_debug or false) ||
      (log_0_3_9.max_level_debug or false) ||
      (f.log_0_3_9.max_level_debug or false);
    log_0_4_8.max_level_error =
      (f.log_0_4_8.max_level_error or false) ||
      (log_0_3_9.max_level_error or false) ||
      (f.log_0_3_9.max_level_error or false);
    log_0_4_8.max_level_info =
      (f.log_0_4_8.max_level_info or false) ||
      (log_0_3_9.max_level_info or false) ||
      (f.log_0_3_9.max_level_info or false);
    log_0_4_8.max_level_off =
      (f.log_0_4_8.max_level_off or false) ||
      (log_0_3_9.max_level_off or false) ||
      (f.log_0_3_9.max_level_off or false);
    log_0_4_8.max_level_trace =
      (f.log_0_4_8.max_level_trace or false) ||
      (log_0_3_9.max_level_trace or false) ||
      (f.log_0_3_9.max_level_trace or false);
    log_0_4_8.max_level_warn =
      (f.log_0_4_8.max_level_warn or false) ||
      (log_0_3_9.max_level_warn or false) ||
      (f.log_0_3_9.max_level_warn or false);
    log_0_4_8.release_max_level_debug =
      (f.log_0_4_8.release_max_level_debug or false) ||
      (log_0_3_9.release_max_level_debug or false) ||
      (f.log_0_3_9.release_max_level_debug or false);
    log_0_4_8.release_max_level_error =
      (f.log_0_4_8.release_max_level_error or false) ||
      (log_0_3_9.release_max_level_error or false) ||
      (f.log_0_3_9.release_max_level_error or false);
    log_0_4_8.release_max_level_info =
      (f.log_0_4_8.release_max_level_info or false) ||
      (log_0_3_9.release_max_level_info or false) ||
      (f.log_0_3_9.release_max_level_info or false);
    log_0_4_8.release_max_level_off =
      (f.log_0_4_8.release_max_level_off or false) ||
      (log_0_3_9.release_max_level_off or false) ||
      (f.log_0_3_9.release_max_level_off or false);
    log_0_4_8.release_max_level_trace =
      (f.log_0_4_8.release_max_level_trace or false) ||
      (log_0_3_9.release_max_level_trace or false) ||
      (f.log_0_3_9.release_max_level_trace or false);
    log_0_4_8.release_max_level_warn =
      (f.log_0_4_8.release_max_level_warn or false) ||
      (log_0_3_9.release_max_level_warn or false) ||
      (f.log_0_3_9.release_max_level_warn or false);
    log_0_4_8.std =
      (f.log_0_4_8.std or false) ||
      (log_0_3_9.use_std or false) ||
      (f.log_0_3_9.use_std or false);
  }) [ log_0_4_8_features ];
  log_0_4_8 = { features?(log_0_4_8_features {}) }: log_0_4_8_ {
    dependencies = mapFeatures features ([ cfg_if_0_1_10 ]);
    features = mkFeatures (features.log_0_4_8 or {});
  };
  log_0_4_8_features = f: updateFeatures f (rec {
    cfg_if_0_1_10.default = true;
    log_0_4_8.default = (f.log_0_4_8.default or true);
    log_0_4_8.kv_unstable =
      (f.log_0_4_8.kv_unstable or false) ||
      (f.log_0_4_8.kv_unstable_sval or false) ||
      (log_0_4_8.kv_unstable_sval or false);
  }) [ cfg_if_0_1_10_features ];
  matches_0_1_8 = { features?(matches_0_1_8_features {}) }: matches_0_1_8_ {};
  matches_0_1_8_features = f: updateFeatures f (rec {
    matches_0_1_8.default = (f.matches_0_1_8.default or true);
  }) [];
  mime_0_2_6 = { features?(mime_0_2_6_features {}) }: mime_0_2_6_ {
    dependencies = mapFeatures features ([ log_0_3_9 ]);
    features = mkFeatures (features.mime_0_2_6 or {});
  };
  mime_0_2_6_features = f: updateFeatures f (rec {
    log_0_3_9.default = true;
    mime_0_2_6.default = (f.mime_0_2_6.default or true);
    mime_0_2_6.heapsize =
      (f.mime_0_2_6.heapsize or false) ||
      (f.mime_0_2_6.heap_size or false) ||
      (mime_0_2_6.heap_size or false);
  }) [ log_0_3_9_features ];
  mime_guess_1_8_7 = { features?(mime_guess_1_8_7_features {}) }: mime_guess_1_8_7_ {
    dependencies = mapFeatures features ([ mime_0_2_6 phf_0_7_24 unicase_1_4_2 ]);
    buildDependencies = mapFeatures features ([ phf_codegen_0_7_24 unicase_1_4_2 ]);
    features = mkFeatures (features.mime_guess_1_8_7 or {});
  };
  mime_guess_1_8_7_features = f: updateFeatures f (rec {
    mime_0_2_6.default = true;
    mime_guess_1_8_7.default = (f.mime_guess_1_8_7.default or true);
    phf_0_7_24.default = true;
    phf_0_7_24.unicase = true;
    phf_codegen_0_7_24.default = true;
    unicase_1_4_2.default = true;
  }) [ mime_0_2_6_features phf_0_7_24_features unicase_1_4_2_features phf_codegen_0_7_24_features unicase_1_4_2_features ];
  modifier_0_1_0 = { features?(modifier_0_1_0_features {}) }: modifier_0_1_0_ {};
  modifier_0_1_0_features = f: updateFeatures f (rec {
    modifier_0_1_0.default = (f.modifier_0_1_0.default or true);
  }) [];
  num_cpus_1_10_1 = { features?(num_cpus_1_10_1_features {}) }: num_cpus_1_10_1_ {
    dependencies = mapFeatures features ([ libc_0_2_64 ]);
  };
  num_cpus_1_10_1_features = f: updateFeatures f (rec {
    libc_0_2_64.default = true;
    num_cpus_1_10_1.default = (f.num_cpus_1_10_1.default or true);
  }) [ libc_0_2_64_features ];
  percent_encoding_1_0_1 = { features?(percent_encoding_1_0_1_features {}) }: percent_encoding_1_0_1_ {};
  percent_encoding_1_0_1_features = f: updateFeatures f (rec {
    percent_encoding_1_0_1.default = (f.percent_encoding_1_0_1.default or true);
  }) [];
  phf_0_7_24 = { features?(phf_0_7_24_features {}) }: phf_0_7_24_ {
    dependencies = mapFeatures features ([ phf_shared_0_7_24 ]);
    features = mkFeatures (features.phf_0_7_24 or {});
  };
  phf_0_7_24_features = f: updateFeatures f (rec {
    phf_0_7_24.default = (f.phf_0_7_24.default or true);
    phf_0_7_24.phf_macros =
      (f.phf_0_7_24.phf_macros or false) ||
      (f.phf_0_7_24.macros or false) ||
      (phf_0_7_24.macros or false);
    phf_shared_0_7_24.core =
      (f.phf_shared_0_7_24.core or false) ||
      (phf_0_7_24.core or false) ||
      (f.phf_0_7_24.core or false);
    phf_shared_0_7_24.default = true;
    phf_shared_0_7_24.unicase =
      (f.phf_shared_0_7_24.unicase or false) ||
      (phf_0_7_24.unicase or false) ||
      (f.phf_0_7_24.unicase or false);
  }) [ phf_shared_0_7_24_features ];
  phf_codegen_0_7_24 = { features?(phf_codegen_0_7_24_features {}) }: phf_codegen_0_7_24_ {
    dependencies = mapFeatures features ([ phf_generator_0_7_24 phf_shared_0_7_24 ]);
  };
  phf_codegen_0_7_24_features = f: updateFeatures f (rec {
    phf_codegen_0_7_24.default = (f.phf_codegen_0_7_24.default or true);
    phf_generator_0_7_24.default = true;
    phf_shared_0_7_24.default = true;
  }) [ phf_generator_0_7_24_features phf_shared_0_7_24_features ];
  phf_generator_0_7_24 = { features?(phf_generator_0_7_24_features {}) }: phf_generator_0_7_24_ {
    dependencies = mapFeatures features ([ phf_shared_0_7_24 rand_0_6_5 ]);
  };
  phf_generator_0_7_24_features = f: updateFeatures f (rec {
    phf_generator_0_7_24.default = (f.phf_generator_0_7_24.default or true);
    phf_shared_0_7_24.default = true;
    rand_0_6_5.default = true;
  }) [ phf_shared_0_7_24_features rand_0_6_5_features ];
  phf_shared_0_7_24 = { features?(phf_shared_0_7_24_features {}) }: phf_shared_0_7_24_ {
    dependencies = mapFeatures features ([ siphasher_0_2_3 ]
      ++ (if features.phf_shared_0_7_24.unicase or false then [ unicase_1_4_2 ] else []));
    features = mkFeatures (features.phf_shared_0_7_24 or {});
  };
  phf_shared_0_7_24_features = f: updateFeatures f (rec {
    phf_shared_0_7_24.default = (f.phf_shared_0_7_24.default or true);
    siphasher_0_2_3.default = true;
    unicase_1_4_2.default = true;
  }) [ siphasher_0_2_3_features unicase_1_4_2_features ];
  plugin_0_2_6 = { features?(plugin_0_2_6_features {}) }: plugin_0_2_6_ {
    dependencies = mapFeatures features ([ typemap_0_3_3 ]);
  };
  plugin_0_2_6_features = f: updateFeatures f (rec {
    plugin_0_2_6.default = (f.plugin_0_2_6.default or true);
    typemap_0_3_3.default = true;
  }) [ typemap_0_3_3_features ];
  ppv_lite86_0_2_5 = { features?(ppv_lite86_0_2_5_features {}) }: ppv_lite86_0_2_5_ {
    features = mkFeatures (features.ppv_lite86_0_2_5 or {});
  };
  ppv_lite86_0_2_5_features = f: updateFeatures f (rec {
    ppv_lite86_0_2_5.default = (f.ppv_lite86_0_2_5.default or true);
    ppv_lite86_0_2_5.simd =
      (f.ppv_lite86_0_2_5.simd or false) ||
      (f.ppv_lite86_0_2_5.default or false) ||
      (ppv_lite86_0_2_5.default or false);
    ppv_lite86_0_2_5.std =
      (f.ppv_lite86_0_2_5.std or false) ||
      (f.ppv_lite86_0_2_5.default or false) ||
      (ppv_lite86_0_2_5.default or false);
  }) [];
  rand_0_6_5 = { features?(rand_0_6_5_features {}) }: rand_0_6_5_ {
    dependencies = mapFeatures features ([ rand_chacha_0_1_1 rand_core_0_4_2 rand_hc_0_1_0 rand_isaac_0_1_1 rand_jitter_0_1_4 rand_pcg_0_1_2 rand_xorshift_0_1_1 ]
      ++ (if features.rand_0_6_5.rand_os or false then [ rand_os_0_1_3 ] else []))
      ++ (if (kernel == "linux" || kernel == "darwin") then mapFeatures features ([ libc_0_2_64 ]) else [])
      ++ (if kernel == "windows" then mapFeatures features ([ winapi_0_3_8 ]) else []);
    buildDependencies = mapFeatures features ([ autocfg_0_1_6 ]);
    features = mkFeatures (features.rand_0_6_5 or {});
  };
  rand_0_6_5_features = f: updateFeatures f (rec {
    autocfg_0_1_6.default = true;
    libc_0_2_64.default = (f.libc_0_2_64.default or false);
    rand_0_6_5.alloc =
      (f.rand_0_6_5.alloc or false) ||
      (f.rand_0_6_5.std or false) ||
      (rand_0_6_5.std or false);
    rand_0_6_5.default = (f.rand_0_6_5.default or true);
    rand_0_6_5.packed_simd =
      (f.rand_0_6_5.packed_simd or false) ||
      (f.rand_0_6_5.simd_support or false) ||
      (rand_0_6_5.simd_support or false);
    rand_0_6_5.rand_os =
      (f.rand_0_6_5.rand_os or false) ||
      (f.rand_0_6_5.std or false) ||
      (rand_0_6_5.std or false);
    rand_0_6_5.simd_support =
      (f.rand_0_6_5.simd_support or false) ||
      (f.rand_0_6_5.nightly or false) ||
      (rand_0_6_5.nightly or false);
    rand_0_6_5.std =
      (f.rand_0_6_5.std or false) ||
      (f.rand_0_6_5.default or false) ||
      (rand_0_6_5.default or false);
    rand_chacha_0_1_1.default = true;
    rand_core_0_4_2.alloc =
      (f.rand_core_0_4_2.alloc or false) ||
      (rand_0_6_5.alloc or false) ||
      (f.rand_0_6_5.alloc or false);
    rand_core_0_4_2.default = true;
    rand_core_0_4_2.serde1 =
      (f.rand_core_0_4_2.serde1 or false) ||
      (rand_0_6_5.serde1 or false) ||
      (f.rand_0_6_5.serde1 or false);
    rand_core_0_4_2.std =
      (f.rand_core_0_4_2.std or false) ||
      (rand_0_6_5.std or false) ||
      (f.rand_0_6_5.std or false);
    rand_hc_0_1_0.default = true;
    rand_isaac_0_1_1.default = true;
    rand_isaac_0_1_1.serde1 =
      (f.rand_isaac_0_1_1.serde1 or false) ||
      (rand_0_6_5.serde1 or false) ||
      (f.rand_0_6_5.serde1 or false);
    rand_jitter_0_1_4.default = true;
    rand_jitter_0_1_4.std =
      (f.rand_jitter_0_1_4.std or false) ||
      (rand_0_6_5.std or false) ||
      (f.rand_0_6_5.std or false);
    rand_os_0_1_3.default = true;
    rand_os_0_1_3.stdweb =
      (f.rand_os_0_1_3.stdweb or false) ||
      (rand_0_6_5.stdweb or false) ||
      (f.rand_0_6_5.stdweb or false);
    rand_os_0_1_3.wasm-bindgen =
      (f.rand_os_0_1_3.wasm-bindgen or false) ||
      (rand_0_6_5.wasm-bindgen or false) ||
      (f.rand_0_6_5.wasm-bindgen or false);
    rand_pcg_0_1_2.default = true;
    rand_xorshift_0_1_1.default = true;
    rand_xorshift_0_1_1.serde1 =
      (f.rand_xorshift_0_1_1.serde1 or false) ||
      (rand_0_6_5.serde1 or false) ||
      (f.rand_0_6_5.serde1 or false);
    winapi_0_3_8.default = true;
    winapi_0_3_8.minwindef = true;
    winapi_0_3_8.ntsecapi = true;
    winapi_0_3_8.profileapi = true;
    winapi_0_3_8.winnt = true;
  }) [ rand_chacha_0_1_1_features rand_core_0_4_2_features rand_hc_0_1_0_features rand_isaac_0_1_1_features rand_jitter_0_1_4_features rand_os_0_1_3_features rand_pcg_0_1_2_features rand_xorshift_0_1_1_features autocfg_0_1_6_features libc_0_2_64_features winapi_0_3_8_features ];
  rand_0_7_2 = { features?(rand_0_7_2_features {}) }: rand_0_7_2_ {
    dependencies = mapFeatures features ([ rand_core_0_5_1 ])
      ++ (if !(kernel == "emscripten") then mapFeatures features ([ rand_chacha_0_2_1 ]) else [])
      ++ (if kernel == "emscripten" then mapFeatures features ([ rand_hc_0_2_0 ]) else [])
      ++ (if (kernel == "linux" || kernel == "darwin") then mapFeatures features ([ libc_0_2_64 ]) else []);
    features = mkFeatures (features.rand_0_7_2 or {});
  };
  rand_0_7_2_features = f: updateFeatures f (rec {
    libc_0_2_64.default = (f.libc_0_2_64.default or false);
    rand_0_7_2.alloc =
      (f.rand_0_7_2.alloc or false) ||
      (f.rand_0_7_2.std or false) ||
      (rand_0_7_2.std or false);
    rand_0_7_2.default = (f.rand_0_7_2.default or true);
    rand_0_7_2.getrandom =
      (f.rand_0_7_2.getrandom or false) ||
      (f.rand_0_7_2.std or false) ||
      (rand_0_7_2.std or false);
    rand_0_7_2.getrandom_package =
      (f.rand_0_7_2.getrandom_package or false) ||
      (f.rand_0_7_2.getrandom or false) ||
      (rand_0_7_2.getrandom or false);
    rand_0_7_2.packed_simd =
      (f.rand_0_7_2.packed_simd or false) ||
      (f.rand_0_7_2.simd_support or false) ||
      (rand_0_7_2.simd_support or false);
    rand_0_7_2.rand_pcg =
      (f.rand_0_7_2.rand_pcg or false) ||
      (f.rand_0_7_2.small_rng or false) ||
      (rand_0_7_2.small_rng or false);
    rand_0_7_2.simd_support =
      (f.rand_0_7_2.simd_support or false) ||
      (f.rand_0_7_2.nightly or false) ||
      (rand_0_7_2.nightly or false);
    rand_0_7_2.std =
      (f.rand_0_7_2.std or false) ||
      (f.rand_0_7_2.default or false) ||
      (rand_0_7_2.default or false);
    rand_chacha_0_2_1.default = (f.rand_chacha_0_2_1.default or false);
    rand_core_0_5_1.alloc =
      (f.rand_core_0_5_1.alloc or false) ||
      (rand_0_7_2.alloc or false) ||
      (f.rand_0_7_2.alloc or false);
    rand_core_0_5_1.default = true;
    rand_core_0_5_1.getrandom =
      (f.rand_core_0_5_1.getrandom or false) ||
      (rand_0_7_2.getrandom or false) ||
      (f.rand_0_7_2.getrandom or false);
    rand_core_0_5_1.std =
      (f.rand_core_0_5_1.std or false) ||
      (rand_0_7_2.std or false) ||
      (f.rand_0_7_2.std or false);
    rand_hc_0_2_0.default = true;
  }) [ rand_core_0_5_1_features rand_chacha_0_2_1_features rand_hc_0_2_0_features libc_0_2_64_features ];
  rand_chacha_0_1_1 = { features?(rand_chacha_0_1_1_features {}) }: rand_chacha_0_1_1_ {
    dependencies = mapFeatures features ([ rand_core_0_3_1 ]);
    buildDependencies = mapFeatures features ([ autocfg_0_1_6 ]);
  };
  rand_chacha_0_1_1_features = f: updateFeatures f (rec {
    autocfg_0_1_6.default = true;
    rand_chacha_0_1_1.default = (f.rand_chacha_0_1_1.default or true);
    rand_core_0_3_1.default = (f.rand_core_0_3_1.default or false);
  }) [ rand_core_0_3_1_features autocfg_0_1_6_features ];
  rand_chacha_0_2_1 = { features?(rand_chacha_0_2_1_features {}) }: rand_chacha_0_2_1_ {
    dependencies = mapFeatures features ([ c2_chacha_0_2_2 rand_core_0_5_1 ]);
    features = mkFeatures (features.rand_chacha_0_2_1 or {});
  };
  rand_chacha_0_2_1_features = f: updateFeatures f (rec {
    c2_chacha_0_2_2.default = (f.c2_chacha_0_2_2.default or false);
    c2_chacha_0_2_2.simd = true;
    c2_chacha_0_2_2.std =
      (f.c2_chacha_0_2_2.std or false) ||
      (rand_chacha_0_2_1.std or false) ||
      (f.rand_chacha_0_2_1.std or false);
    rand_chacha_0_2_1.default = (f.rand_chacha_0_2_1.default or true);
    rand_chacha_0_2_1.simd =
      (f.rand_chacha_0_2_1.simd or false) ||
      (f.rand_chacha_0_2_1.default or false) ||
      (rand_chacha_0_2_1.default or false);
    rand_chacha_0_2_1.std =
      (f.rand_chacha_0_2_1.std or false) ||
      (f.rand_chacha_0_2_1.default or false) ||
      (rand_chacha_0_2_1.default or false);
    rand_core_0_5_1.default = true;
  }) [ c2_chacha_0_2_2_features rand_core_0_5_1_features ];
  rand_core_0_3_1 = { features?(rand_core_0_3_1_features {}) }: rand_core_0_3_1_ {
    dependencies = mapFeatures features ([ rand_core_0_4_2 ]);
    features = mkFeatures (features.rand_core_0_3_1 or {});
  };
  rand_core_0_3_1_features = f: updateFeatures f (rec {
    rand_core_0_3_1.default = (f.rand_core_0_3_1.default or true);
    rand_core_0_3_1.std =
      (f.rand_core_0_3_1.std or false) ||
      (f.rand_core_0_3_1.default or false) ||
      (rand_core_0_3_1.default or false);
    rand_core_0_4_2.alloc =
      (f.rand_core_0_4_2.alloc or false) ||
      (rand_core_0_3_1.alloc or false) ||
      (f.rand_core_0_3_1.alloc or false);
    rand_core_0_4_2.default = true;
    rand_core_0_4_2.serde1 =
      (f.rand_core_0_4_2.serde1 or false) ||
      (rand_core_0_3_1.serde1 or false) ||
      (f.rand_core_0_3_1.serde1 or false);
    rand_core_0_4_2.std =
      (f.rand_core_0_4_2.std or false) ||
      (rand_core_0_3_1.std or false) ||
      (f.rand_core_0_3_1.std or false);
  }) [ rand_core_0_4_2_features ];
  rand_core_0_4_2 = { features?(rand_core_0_4_2_features {}) }: rand_core_0_4_2_ {
    dependencies = mapFeatures features ([]);
    features = mkFeatures (features.rand_core_0_4_2 or {});
  };
  rand_core_0_4_2_features = f: updateFeatures f (rec {
    rand_core_0_4_2.alloc =
      (f.rand_core_0_4_2.alloc or false) ||
      (f.rand_core_0_4_2.std or false) ||
      (rand_core_0_4_2.std or false);
    rand_core_0_4_2.default = (f.rand_core_0_4_2.default or true);
    rand_core_0_4_2.serde =
      (f.rand_core_0_4_2.serde or false) ||
      (f.rand_core_0_4_2.serde1 or false) ||
      (rand_core_0_4_2.serde1 or false);
    rand_core_0_4_2.serde_derive =
      (f.rand_core_0_4_2.serde_derive or false) ||
      (f.rand_core_0_4_2.serde1 or false) ||
      (rand_core_0_4_2.serde1 or false);
  }) [];
  rand_core_0_5_1 = { features?(rand_core_0_5_1_features {}) }: rand_core_0_5_1_ {
    dependencies = mapFeatures features ([ ]
      ++ (if features.rand_core_0_5_1.getrandom or false then [ getrandom_0_1_12 ] else []));
    features = mkFeatures (features.rand_core_0_5_1 or {});
  };
  rand_core_0_5_1_features = f: updateFeatures f (rec {
    getrandom_0_1_12.default = true;
    getrandom_0_1_12.std =
      (f.getrandom_0_1_12.std or false) ||
      (rand_core_0_5_1.std or false) ||
      (f.rand_core_0_5_1.std or false);
    rand_core_0_5_1.alloc =
      (f.rand_core_0_5_1.alloc or false) ||
      (f.rand_core_0_5_1.std or false) ||
      (rand_core_0_5_1.std or false);
    rand_core_0_5_1.default = (f.rand_core_0_5_1.default or true);
    rand_core_0_5_1.getrandom =
      (f.rand_core_0_5_1.getrandom or false) ||
      (f.rand_core_0_5_1.std or false) ||
      (rand_core_0_5_1.std or false);
    rand_core_0_5_1.serde =
      (f.rand_core_0_5_1.serde or false) ||
      (f.rand_core_0_5_1.serde1 or false) ||
      (rand_core_0_5_1.serde1 or false);
  }) [ getrandom_0_1_12_features ];
  rand_hc_0_1_0 = { features?(rand_hc_0_1_0_features {}) }: rand_hc_0_1_0_ {
    dependencies = mapFeatures features ([ rand_core_0_3_1 ]);
  };
  rand_hc_0_1_0_features = f: updateFeatures f (rec {
    rand_core_0_3_1.default = (f.rand_core_0_3_1.default or false);
    rand_hc_0_1_0.default = (f.rand_hc_0_1_0.default or true);
  }) [ rand_core_0_3_1_features ];
  rand_hc_0_2_0 = { features?(rand_hc_0_2_0_features {}) }: rand_hc_0_2_0_ {
    dependencies = mapFeatures features ([ rand_core_0_5_1 ]);
  };
  rand_hc_0_2_0_features = f: updateFeatures f (rec {
    rand_core_0_5_1.default = true;
    rand_hc_0_2_0.default = (f.rand_hc_0_2_0.default or true);
  }) [ rand_core_0_5_1_features ];
  rand_isaac_0_1_1 = { features?(rand_isaac_0_1_1_features {}) }: rand_isaac_0_1_1_ {
    dependencies = mapFeatures features ([ rand_core_0_3_1 ]);
    features = mkFeatures (features.rand_isaac_0_1_1 or {});
  };
  rand_isaac_0_1_1_features = f: updateFeatures f (rec {
    rand_core_0_3_1.default = (f.rand_core_0_3_1.default or false);
    rand_core_0_3_1.serde1 =
      (f.rand_core_0_3_1.serde1 or false) ||
      (rand_isaac_0_1_1.serde1 or false) ||
      (f.rand_isaac_0_1_1.serde1 or false);
    rand_isaac_0_1_1.default = (f.rand_isaac_0_1_1.default or true);
    rand_isaac_0_1_1.serde =
      (f.rand_isaac_0_1_1.serde or false) ||
      (f.rand_isaac_0_1_1.serde1 or false) ||
      (rand_isaac_0_1_1.serde1 or false);
    rand_isaac_0_1_1.serde_derive =
      (f.rand_isaac_0_1_1.serde_derive or false) ||
      (f.rand_isaac_0_1_1.serde1 or false) ||
      (rand_isaac_0_1_1.serde1 or false);
  }) [ rand_core_0_3_1_features ];
  rand_jitter_0_1_4 = { features?(rand_jitter_0_1_4_features {}) }: rand_jitter_0_1_4_ {
    dependencies = mapFeatures features ([ rand_core_0_4_2 ])
      ++ (if kernel == "darwin" || kernel == "ios" then mapFeatures features ([ libc_0_2_64 ]) else [])
      ++ (if kernel == "windows" then mapFeatures features ([ winapi_0_3_8 ]) else []);
    features = mkFeatures (features.rand_jitter_0_1_4 or {});
  };
  rand_jitter_0_1_4_features = f: updateFeatures f (rec {
    libc_0_2_64.default = true;
    rand_core_0_4_2.default = true;
    rand_core_0_4_2.std =
      (f.rand_core_0_4_2.std or false) ||
      (rand_jitter_0_1_4.std or false) ||
      (f.rand_jitter_0_1_4.std or false);
    rand_jitter_0_1_4.default = (f.rand_jitter_0_1_4.default or true);
    winapi_0_3_8.default = true;
    winapi_0_3_8.profileapi = true;
  }) [ rand_core_0_4_2_features libc_0_2_64_features winapi_0_3_8_features ];
  rand_os_0_1_3 = { features?(rand_os_0_1_3_features {}) }: rand_os_0_1_3_ {
    dependencies = mapFeatures features ([ rand_core_0_4_2 ])
      ++ (if abi == "sgx" then mapFeatures features ([ rdrand_0_4_0 ]) else [])
      ++ (if kernel == "cloudabi" then mapFeatures features ([ cloudabi_0_0_3 ]) else [])
      ++ (if kernel == "fuchsia" then mapFeatures features ([ fuchsia_cprng_0_1_1 ]) else [])
      ++ (if (kernel == "linux" || kernel == "darwin") then mapFeatures features ([ libc_0_2_64 ]) else [])
      ++ (if kernel == "windows" then mapFeatures features ([ winapi_0_3_8 ]) else [])
      ++ (if kernel == "wasm32-unknown-unknown" then mapFeatures features ([]) else []);
  };
  rand_os_0_1_3_features = f: updateFeatures f (rec {
    cloudabi_0_0_3.default = true;
    fuchsia_cprng_0_1_1.default = true;
    libc_0_2_64.default = true;
    rand_core_0_4_2.default = true;
    rand_core_0_4_2.std = true;
    rand_os_0_1_3.default = (f.rand_os_0_1_3.default or true);
    rdrand_0_4_0.default = true;
    winapi_0_3_8.default = true;
    winapi_0_3_8.minwindef = true;
    winapi_0_3_8.ntsecapi = true;
    winapi_0_3_8.winnt = true;
  }) [ rand_core_0_4_2_features rdrand_0_4_0_features cloudabi_0_0_3_features fuchsia_cprng_0_1_1_features libc_0_2_64_features winapi_0_3_8_features ];
  rand_pcg_0_1_2 = { features?(rand_pcg_0_1_2_features {}) }: rand_pcg_0_1_2_ {
    dependencies = mapFeatures features ([ rand_core_0_4_2 ]);
    buildDependencies = mapFeatures features ([ autocfg_0_1_6 ]);
    features = mkFeatures (features.rand_pcg_0_1_2 or {});
  };
  rand_pcg_0_1_2_features = f: updateFeatures f (rec {
    autocfg_0_1_6.default = true;
    rand_core_0_4_2.default = true;
    rand_pcg_0_1_2.default = (f.rand_pcg_0_1_2.default or true);
    rand_pcg_0_1_2.serde =
      (f.rand_pcg_0_1_2.serde or false) ||
      (f.rand_pcg_0_1_2.serde1 or false) ||
      (rand_pcg_0_1_2.serde1 or false);
    rand_pcg_0_1_2.serde_derive =
      (f.rand_pcg_0_1_2.serde_derive or false) ||
      (f.rand_pcg_0_1_2.serde1 or false) ||
      (rand_pcg_0_1_2.serde1 or false);
  }) [ rand_core_0_4_2_features autocfg_0_1_6_features ];
  rand_xorshift_0_1_1 = { features?(rand_xorshift_0_1_1_features {}) }: rand_xorshift_0_1_1_ {
    dependencies = mapFeatures features ([ rand_core_0_3_1 ]);
    features = mkFeatures (features.rand_xorshift_0_1_1 or {});
  };
  rand_xorshift_0_1_1_features = f: updateFeatures f (rec {
    rand_core_0_3_1.default = (f.rand_core_0_3_1.default or false);
    rand_xorshift_0_1_1.default = (f.rand_xorshift_0_1_1.default or true);
    rand_xorshift_0_1_1.serde =
      (f.rand_xorshift_0_1_1.serde or false) ||
      (f.rand_xorshift_0_1_1.serde1 or false) ||
      (rand_xorshift_0_1_1.serde1 or false);
    rand_xorshift_0_1_1.serde_derive =
      (f.rand_xorshift_0_1_1.serde_derive or false) ||
      (f.rand_xorshift_0_1_1.serde1 or false) ||
      (rand_xorshift_0_1_1.serde1 or false);
  }) [ rand_core_0_3_1_features ];
  rdrand_0_4_0 = { features?(rdrand_0_4_0_features {}) }: rdrand_0_4_0_ {
    dependencies = mapFeatures features ([ rand_core_0_3_1 ]);
    features = mkFeatures (features.rdrand_0_4_0 or {});
  };
  rdrand_0_4_0_features = f: updateFeatures f (rec {
    rand_core_0_3_1.default = (f.rand_core_0_3_1.default or false);
    rdrand_0_4_0.default = (f.rdrand_0_4_0.default or true);
    rdrand_0_4_0.std =
      (f.rdrand_0_4_0.std or false) ||
      (f.rdrand_0_4_0.default or false) ||
      (rdrand_0_4_0.default or false);
  }) [ rand_core_0_3_1_features ];
  redox_syscall_0_1_56 = { features?(redox_syscall_0_1_56_features {}) }: redox_syscall_0_1_56_ {};
  redox_syscall_0_1_56_features = f: updateFeatures f (rec {
    redox_syscall_0_1_56.default = (f.redox_syscall_0_1_56.default or true);
  }) [];
  remove_dir_all_0_5_2 = { features?(remove_dir_all_0_5_2_features {}) }: remove_dir_all_0_5_2_ {
    dependencies = (if kernel == "windows" then mapFeatures features ([ winapi_0_3_8 ]) else []);
  };
  remove_dir_all_0_5_2_features = f: updateFeatures f (rec {
    remove_dir_all_0_5_2.default = (f.remove_dir_all_0_5_2.default or true);
    winapi_0_3_8.default = true;
    winapi_0_3_8.errhandlingapi = true;
    winapi_0_3_8.fileapi = true;
    winapi_0_3_8.std = true;
    winapi_0_3_8.winbase = true;
    winapi_0_3_8.winerror = true;
  }) [ winapi_0_3_8_features ];
  route_recognizer_0_1_13 = { features?(route_recognizer_0_1_13_features {}) }: route_recognizer_0_1_13_ {};
  route_recognizer_0_1_13_features = f: updateFeatures f (rec {
    route_recognizer_0_1_13.default = (f.route_recognizer_0_1_13.default or true);
  }) [];
  router_0_6_0 = { features?(router_0_6_0_features {}) }: router_0_6_0_ {
    dependencies = mapFeatures features ([ iron_0_6_1 route_recognizer_0_1_13 url_1_7_2 ]);
  };
  router_0_6_0_features = f: updateFeatures f (rec {
    iron_0_6_1.default = true;
    route_recognizer_0_1_13.default = true;
    router_0_6_0.default = (f.router_0_6_0.default or true);
    url_1_7_2.default = true;
  }) [ iron_0_6_1_features route_recognizer_0_1_13_features url_1_7_2_features ];
  safemem_0_3_2 = { features?(safemem_0_3_2_features {}) }: safemem_0_3_2_ {
    features = mkFeatures (features.safemem_0_3_2 or {});
  };
  safemem_0_3_2_features = f: updateFeatures f (rec {
    safemem_0_3_2.default = (f.safemem_0_3_2.default or true);
    safemem_0_3_2.std =
      (f.safemem_0_3_2.std or false) ||
      (f.safemem_0_3_2.default or false) ||
      (safemem_0_3_2.default or false);
  }) [];
  siphasher_0_2_3 = { features?(siphasher_0_2_3_features {}) }: siphasher_0_2_3_ {};
  siphasher_0_2_3_features = f: updateFeatures f (rec {
    siphasher_0_2_3.default = (f.siphasher_0_2_3.default or true);
  }) [];
  smallvec_0_6_10 = { features?(smallvec_0_6_10_features {}) }: smallvec_0_6_10_ {
    dependencies = mapFeatures features ([]);
    features = mkFeatures (features.smallvec_0_6_10 or {});
  };
  smallvec_0_6_10_features = f: updateFeatures f (rec {
    smallvec_0_6_10.default = (f.smallvec_0_6_10.default or true);
    smallvec_0_6_10.std =
      (f.smallvec_0_6_10.std or false) ||
      (f.smallvec_0_6_10.default or false) ||
      (smallvec_0_6_10.default or false);
  }) [];
  tempfile_3_1_0 = { features?(tempfile_3_1_0_features {}) }: tempfile_3_1_0_ {
    dependencies = mapFeatures features ([ cfg_if_0_1_10 rand_0_7_2 remove_dir_all_0_5_2 ])
      ++ (if kernel == "redox" then mapFeatures features ([ redox_syscall_0_1_56 ]) else [])
      ++ (if (kernel == "linux" || kernel == "darwin") then mapFeatures features ([ libc_0_2_64 ]) else [])
      ++ (if kernel == "windows" then mapFeatures features ([ winapi_0_3_8 ]) else []);
  };
  tempfile_3_1_0_features = f: updateFeatures f (rec {
    cfg_if_0_1_10.default = true;
    libc_0_2_64.default = true;
    rand_0_7_2.default = true;
    redox_syscall_0_1_56.default = true;
    remove_dir_all_0_5_2.default = true;
    tempfile_3_1_0.default = (f.tempfile_3_1_0.default or true);
    winapi_0_3_8.default = true;
    winapi_0_3_8.fileapi = true;
    winapi_0_3_8.handleapi = true;
    winapi_0_3_8.winbase = true;
  }) [ cfg_if_0_1_10_features rand_0_7_2_features remove_dir_all_0_5_2_features redox_syscall_0_1_56_features libc_0_2_64_features winapi_0_3_8_features ];
  time_0_1_42 = { features?(time_0_1_42_features {}) }: time_0_1_42_ {
    dependencies = mapFeatures features ([ libc_0_2_64 ])
      ++ (if kernel == "redox" then mapFeatures features ([ redox_syscall_0_1_56 ]) else [])
      ++ (if kernel == "windows" then mapFeatures features ([ winapi_0_3_8 ]) else []);
  };
  time_0_1_42_features = f: updateFeatures f (rec {
    libc_0_2_64.default = true;
    redox_syscall_0_1_56.default = true;
    time_0_1_42.default = (f.time_0_1_42.default or true);
    winapi_0_3_8.default = true;
    winapi_0_3_8.minwinbase = true;
    winapi_0_3_8.minwindef = true;
    winapi_0_3_8.ntdef = true;
    winapi_0_3_8.profileapi = true;
    winapi_0_3_8.std = true;
    winapi_0_3_8.sysinfoapi = true;
    winapi_0_3_8.timezoneapi = true;
  }) [ libc_0_2_64_features redox_syscall_0_1_56_features winapi_0_3_8_features ];
  traitobject_0_1_0 = { features?(traitobject_0_1_0_features {}) }: traitobject_0_1_0_ {};
  traitobject_0_1_0_features = f: updateFeatures f (rec {
    traitobject_0_1_0.default = (f.traitobject_0_1_0.default or true);
  }) [];
  typeable_0_1_2 = { features?(typeable_0_1_2_features {}) }: typeable_0_1_2_ {};
  typeable_0_1_2_features = f: updateFeatures f (rec {
    typeable_0_1_2.default = (f.typeable_0_1_2.default or true);
  }) [];
  typemap_0_3_3 = { features?(typemap_0_3_3_features {}) }: typemap_0_3_3_ {
    dependencies = mapFeatures features ([ unsafe_any_0_4_2 ]);
  };
  typemap_0_3_3_features = f: updateFeatures f (rec {
    typemap_0_3_3.default = (f.typemap_0_3_3.default or true);
    unsafe_any_0_4_2.default = true;
  }) [ unsafe_any_0_4_2_features ];
  unicase_1_4_2 = { features?(unicase_1_4_2_features {}) }: unicase_1_4_2_ {
    dependencies = mapFeatures features ([]);
    buildDependencies = mapFeatures features ([ version_check_0_1_5 ]);
    features = mkFeatures (features.unicase_1_4_2 or {});
  };
  unicase_1_4_2_features = f: updateFeatures f (rec {
    unicase_1_4_2.default = (f.unicase_1_4_2.default or true);
    unicase_1_4_2.heapsize =
      (f.unicase_1_4_2.heapsize or false) ||
      (f.unicase_1_4_2.heap_size or false) ||
      (unicase_1_4_2.heap_size or false);
    unicase_1_4_2.heapsize_plugin =
      (f.unicase_1_4_2.heapsize_plugin or false) ||
      (f.unicase_1_4_2.heap_size or false) ||
      (unicase_1_4_2.heap_size or false);
    version_check_0_1_5.default = true;
  }) [ version_check_0_1_5_features ];
  unicode_bidi_0_3_4 = { features?(unicode_bidi_0_3_4_features {}) }: unicode_bidi_0_3_4_ {
    dependencies = mapFeatures features ([ matches_0_1_8 ]);
    features = mkFeatures (features.unicode_bidi_0_3_4 or {});
  };
  unicode_bidi_0_3_4_features = f: updateFeatures f (rec {
    matches_0_1_8.default = true;
    unicode_bidi_0_3_4.default = (f.unicode_bidi_0_3_4.default or true);
    unicode_bidi_0_3_4.flame =
      (f.unicode_bidi_0_3_4.flame or false) ||
      (f.unicode_bidi_0_3_4.flame_it or false) ||
      (unicode_bidi_0_3_4.flame_it or false);
    unicode_bidi_0_3_4.flamer =
      (f.unicode_bidi_0_3_4.flamer or false) ||
      (f.unicode_bidi_0_3_4.flame_it or false) ||
      (unicode_bidi_0_3_4.flame_it or false);
    unicode_bidi_0_3_4.serde =
      (f.unicode_bidi_0_3_4.serde or false) ||
      (f.unicode_bidi_0_3_4.with_serde or false) ||
      (unicode_bidi_0_3_4.with_serde or false);
  }) [ matches_0_1_8_features ];
  unicode_normalization_0_1_8 = { features?(unicode_normalization_0_1_8_features {}) }: unicode_normalization_0_1_8_ {
    dependencies = mapFeatures features ([ smallvec_0_6_10 ]);
  };
  unicode_normalization_0_1_8_features = f: updateFeatures f (rec {
    smallvec_0_6_10.default = true;
    unicode_normalization_0_1_8.default = (f.unicode_normalization_0_1_8.default or true);
  }) [ smallvec_0_6_10_features ];
  unsafe_any_0_4_2 = { features?(unsafe_any_0_4_2_features {}) }: unsafe_any_0_4_2_ {
    dependencies = mapFeatures features ([ traitobject_0_1_0 ]);
  };
  unsafe_any_0_4_2_features = f: updateFeatures f (rec {
    traitobject_0_1_0.default = true;
    unsafe_any_0_4_2.default = (f.unsafe_any_0_4_2.default or true);
  }) [ traitobject_0_1_0_features ];
  url_1_7_2 = { features?(url_1_7_2_features {}) }: url_1_7_2_ {
    dependencies = mapFeatures features ([ idna_0_1_5 matches_0_1_8 percent_encoding_1_0_1 ]);
    features = mkFeatures (features.url_1_7_2 or {});
  };
  url_1_7_2_features = f: updateFeatures f (rec {
    idna_0_1_5.default = true;
    matches_0_1_8.default = true;
    percent_encoding_1_0_1.default = true;
    url_1_7_2.default = (f.url_1_7_2.default or true);
    url_1_7_2.encoding =
      (f.url_1_7_2.encoding or false) ||
      (f.url_1_7_2.query_encoding or false) ||
      (url_1_7_2.query_encoding or false);
    url_1_7_2.heapsize =
      (f.url_1_7_2.heapsize or false) ||
      (f.url_1_7_2.heap_size or false) ||
      (url_1_7_2.heap_size or false);
  }) [ idna_0_1_5_features matches_0_1_8_features percent_encoding_1_0_1_features ];
  version_check_0_1_5 = { features?(version_check_0_1_5_features {}) }: version_check_0_1_5_ {};
  version_check_0_1_5_features = f: updateFeatures f (rec {
    version_check_0_1_5.default = (f.version_check_0_1_5.default or true);
  }) [];
  wasi_0_7_0 = { features?(wasi_0_7_0_features {}) }: wasi_0_7_0_ {
    dependencies = mapFeatures features ([]);
    features = mkFeatures (features.wasi_0_7_0 or {});
  };
  wasi_0_7_0_features = f: updateFeatures f (rec {
    wasi_0_7_0.alloc =
      (f.wasi_0_7_0.alloc or false) ||
      (f.wasi_0_7_0.default or false) ||
      (wasi_0_7_0.default or false);
    wasi_0_7_0.compiler_builtins =
      (f.wasi_0_7_0.compiler_builtins or false) ||
      (f.wasi_0_7_0.rustc-dep-of-std or false) ||
      (wasi_0_7_0.rustc-dep-of-std or false);
    wasi_0_7_0.core =
      (f.wasi_0_7_0.core or false) ||
      (f.wasi_0_7_0.rustc-dep-of-std or false) ||
      (wasi_0_7_0.rustc-dep-of-std or false);
    wasi_0_7_0.default = (f.wasi_0_7_0.default or true);
    wasi_0_7_0.rustc-std-workspace-alloc =
      (f.wasi_0_7_0.rustc-std-workspace-alloc or false) ||
      (f.wasi_0_7_0.rustc-dep-of-std or false) ||
      (wasi_0_7_0.rustc-dep-of-std or false);
  }) [];
  winapi_0_3_8 = { features?(winapi_0_3_8_features {}) }: winapi_0_3_8_ {
    dependencies = (if kernel == "i686-pc-windows-gnu" then mapFeatures features ([ winapi_i686_pc_windows_gnu_0_4_0 ]) else [])
      ++ (if kernel == "x86_64-pc-windows-gnu" then mapFeatures features ([ winapi_x86_64_pc_windows_gnu_0_4_0 ]) else []);
    features = mkFeatures (features.winapi_0_3_8 or {});
  };
  winapi_0_3_8_features = f: updateFeatures f (rec {
    winapi_0_3_8.default = (f.winapi_0_3_8.default or true);
    winapi_0_3_8.impl-debug =
      (f.winapi_0_3_8.impl-debug or false) ||
      (f.winapi_0_3_8.debug or false) ||
      (winapi_0_3_8.debug or false);
    winapi_i686_pc_windows_gnu_0_4_0.default = true;
    winapi_x86_64_pc_windows_gnu_0_4_0.default = true;
  }) [ winapi_i686_pc_windows_gnu_0_4_0_features winapi_x86_64_pc_windows_gnu_0_4_0_features ];
  winapi_i686_pc_windows_gnu_0_4_0 = { features?(winapi_i686_pc_windows_gnu_0_4_0_features {}) }: winapi_i686_pc_windows_gnu_0_4_0_ {};
  winapi_i686_pc_windows_gnu_0_4_0_features = f: updateFeatures f (rec {
    winapi_i686_pc_windows_gnu_0_4_0.default = (f.winapi_i686_pc_windows_gnu_0_4_0.default or true);
  }) [];
  winapi_x86_64_pc_windows_gnu_0_4_0 = { features?(winapi_x86_64_pc_windows_gnu_0_4_0_features {}) }: winapi_x86_64_pc_windows_gnu_0_4_0_ {};
  winapi_x86_64_pc_windows_gnu_0_4_0_features = f: updateFeatures f (rec {
    winapi_x86_64_pc_windows_gnu_0_4_0.default = (f.winapi_x86_64_pc_windows_gnu_0_4_0.default or true);
  }) [];
}
